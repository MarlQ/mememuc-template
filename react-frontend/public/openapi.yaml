openapi: 3.0.0
info:
  title: Meme Generator API
  description: API for generating and managing memes
  version: 1.0.0
servers:
  - url: http://localhost:3001
paths:
  /memes:
    get:
      summary: Get a list of memes as JSON data
      tags:
        - Memes
      parameters:
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/creator'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meme'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create any amount of memes
      description: Create memes using a (list of) specified or default template(s) and configuration parameters.
      tags:
        - Memes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                config:
                  type: object
                  properties:
                    store:
                      type: string
                      enum: [unlisted, private, public]
                      description: The desired visibility of the created memes. Will not persist the memes to the server if it is left as undefined (and will download the results instead).
                    return:
                      type: string
                      enum: [download, image, single-view, json]
                      default: single-view
                      description: Whether the memes should be returned as a image/ZIP download, JSON, list of image-urls, or list of single-view urls.
                  default: {store: undefined, return: single-view}
                template:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the template that should be used. This template has to exist on the server, and will fill the texts, images, and canvas parameters with default values (which can be overridden).
                    texts:
                      type: array
                      description: The list of texts that should be rendered. Using a simple string array will cause default values to be used.
                      items:
                        anyOf:
                          - type: string
                          - $ref: '#/components/parameters/text'
                    images:
                      description: The list of image URLs for the memes. Using a simple string array will cause default values to be used.
                      anyOf:
                        - type: string
                        - type: array
                          items:
                            type: object
                            properties:
                              url:
                                type: string
                              x:
                                type: number
                                description: The x position of the image
                                default: 0
                              y:
                                type: number
                                description: The y position of the image
                                default: 0
                    canvas:
                      type: object
                      properties:
                        width:
                          type: number
                          default: 1000
                        height:
                          type: number
                          default: 1000
                        resizeCanvas:
                          type: boolean
                          default: false
                      default: {width: 1000, height: 1000, resizeCanvas: false}
              required: ['config', 'template']
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: URL of the created meme.
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /memes/download:
    get:
      summary: Download a ZIP file of memes (including metadata)
      tags:
        - Memes
      parameters:
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/creator'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /memes/image:
    get:
      summary: Get a list of memes as image URL list
      tags:
        - Memes
      parameters:
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/creator'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  schema:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /memes/single-view:
    get:
      summary: Get a list of memes as single-view URL list
      tags:
        - Memes
      parameters:
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/creator'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  schema:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /memes/{publicId}:
    get:
      summary: Retrieve a single meme by public ID as JSON
      tags:
        - Memes
      parameters:
        - $ref: "#/components/parameters/publicIdPathParam"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meme'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /memes/{publicId}/image:
    get:
      summary: Retrieve a single meme by public ID as an image
      tags:
        - Memes
      parameters:
        - $ref: "#/components/parameters/publicIdPathParam"
      responses:
        '200':
          description: OK
          content:
            image/*:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /memes/{publicId}/download:
    get:
      summary: Retrieve a single meme by public ID as a ZIP download
      tags:
        - Memes
      parameters:
        - $ref: "#/components/parameters/publicIdPathParam"
      responses:
        '200':
          description: OK
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /memes/{publicId}/single-view:
    get:
      summary: Retrieve a single meme by public ID as a single-view URL
      tags:
        - Memes
      parameters:
        - $ref: "#/components/parameters/publicIdPathParam"
      responses:
        '200':
          description: OK
          content:
            type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /memes/{publicId}/like:
    put:
      summary: Add a like to a meme
      description: Adds a like to a meme from the authenticated user.
      tags:
        - Memes
      parameters:
        - $ref: "#/components/parameters/publicIdPathParam"
      responses:
        '200':
          description: OK
        '409':
          description: Meme was already liked by the user
    delete:
      summary: Remove a like from a meme
      description: Removes a like from a meme by the authenticated user.
      tags:
        - Memes
      parameters:
        - $ref: "#/components/parameters/publicIdPathParam"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
        '409':
          description: Meme was not liked by the user
    get:
      summary: Check if the authenticated user liked a meme
      description: Returns a boolean indicating whether the authenticated user liked the meme.
      tags:
        - Memes
      parameters:
        - $ref: "#/components/parameters/publicIdPathParam"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked:
                    type: boolean
  /memes/{publicId}/comments:
    post:
      summary: Post a comment for the meme with the publicId
      description: Adds a new comment to the meme with the specified publicId.
      tags:
        - Memes
      parameters:
        - $ref: "#/components/parameters/publicIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        '200':
          description: Comment posted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
        summary: Get all comments for the meme with the publicId
        description: Returns all comments for the meme with the specified publicId.
        tags:
          - Memes
        parameters:
          - $ref: "#/components/parameters/publicIdPathParam"
        responses:
          '200':
            description: Returns all comments for the specified meme.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Comment"
          '400':
            $ref: '#/components/responses/BadRequest'
          '404':
            $ref: '#/components/responses/NotFound'
          '500':
            $ref: '#/components/responses/InternalServerError'
  /memes/{publicId}/comments/{commentId}:
    get:
      summary: Get a specific comment for the meme with the publicId
      description: Returns the comment with the specified ID for the meme with the specified publicId.
      tags:
        - Memes
      parameters:
        - $ref: "#/components/parameters/publicIdPathParam"
        - name: commentId
          in: path
          required: true
          description: The ID of the comment to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Returns the specified comment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
  /templates:
    get:
      summary: Get a list of all templates
      description: Returns a list of all available templates the user is allowed to see
      tags:
        - Templates
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
    post:
      summary: Creates a new template from the provided data
      tags:
        - Templates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                visibility:
                  type: string
                  enum: [public, private, unlisted]
                  default: public
                image:
                  description: The image in base64 format
                  type: string
                  format: byte
                texts:
                  type: array
                  description: The list of texts that should be rendered. Using a simple string array will cause default values to be used.
                  items:
                    anyOf:
                      - type: string
                      - $ref: '#/components/parameters/text'
                creator:
                  type: string
                url:
                  description: The image url, which will be used if no image parameter is specified
                  type: string
              required:
                - name
                - oneOf:
                  - image
                  - url
      responses:
        '201':
          description: Template created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'        
  /templates/{name}:
    get:
      summary: Gets a template by name
      tags:
        - Templates
      parameters:
        - in: path
          name: name
          required: true
          description: Name of the template to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
    delete:
      summary: Deletes a template by name
      tags:
        - Templates
      parameters:
        - in: path
          name: name
          required: true
          description: Name of the template to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Success
        '404':
          description: Template not found
  /users:
    get:
      summary: Get a list of all users
      tags:
        - Users
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{username}:
    get:
      summary: Get all data of a specific user
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          description: Name of the user to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{username}/memes:
    get:
      summary: Get a list of the user's memes as JSON
      description: Returns a list of the memes created by the user
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          description: Name of the user to retrieve.
          schema:
            type: string
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meme'
  /users/{username}/memes/image:
    get:
      summary: Get a list of the user's memes as image URLs
      description: Returns a list of the memes created by the user
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          description: Name of the user to retrieve.
          schema:
            type: string
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  schema:
                    type: string
  /users/{username}/memes/download:
    get:
      summary: Get a list of the user's memes as zip download
      description: Returns a list of the memes created by the user
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          description: Name of the user to retrieve.
          schema:
            type: string
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/zip:
              schema:
                type: string
                format: binary
  /users/{username}/memes/single-view:
    get:
      summary: Get a list of the user's memes as single-view URLs
      description: Returns a list of the memes created by the user
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          description: Name of the user to retrieve.
          schema:
            type: string
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  schema:
                    type: string
  /users/{username}/templates:
    get:
      summary: Get a list of the user's templates
      description: Returns a list of the templates created by the user
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          description: Name of the user to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
components:
  parameters:
    text:
      type: object
      properties:
        x:
          type: number
          description: The x position of the text (default is middle)
        y:
          type: number
          description: The y position of the text (default is top/bottom for the first two images)
        fontSize:
          type: number
          default: 50
        fontStyle:
          type: string
          default: impact
        strokeWidth:
          type: number
          default: 1
        resizeText:
          type: boolean
          default: false
          description: Determines whether the text should be resized if it is too large
        textColor:
          type: string
          default: white
    publicIdPathParam:
      in: path
      name: publicId
      required: true
      description: Public ID of the document to retrieve.
      schema:
        type: string
    sort:
      name: sort
      in: query
      description: Sort order for the memes
      schema:
        type: string
        enum: [random, newest, oldest]
        default: random
    id:
      name: id
      in: query
      description: PublicID of the meme to retrieve
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: Maximum number of memes to retrieve
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
    creator:
      name: creator
      in: query
      description: Username of the creator of the memes to retrieve
      schema:
        type: string
    skip:
      name: skip
      in: query
      description: Number of memes to skip before returning results
      schema:
        type: integer
        default: 0
        minimum: 0
  schemas:
    Meme:
      type: object
      properties:
        name:
          type: string
          required: true
        creator:
          type: string
          required: true
          description: The user who created the meme
        visibility:
          type: string
          enum: [private, unlisted, public]
          default: 'public'
        image:
          type: string
          format: binary
          required: true
          description: The image buffer (can not be retrieved directly)
        publicId:
          type: string
          required: true
          unique: true
          description: The unique ID of the meme
        contentType:
          type: string
          default: 'image/png'
        createdAt:
          type: string
          format: date-time
        imageUrl:
          type: string
          description: The resource URL of the image contained in the meme
        singleViewUrl:
          type: string
          description: The URL to the single-view of the meme
        likes:
          type: number
          description: The total number of likes the meme received
        comments:
          type: number
          description: The total number of comments the meme received
      required:
        - name
        - creator
        - image
        - publicId
      x-model: Meme
    User:
      type: object
      properties:
        username:
          type: string
          required: true
          unique: true
        displayName:
          type: string
          required: true
        password:
          type: string
          required: true
        createdAt:
          type: string
          format: date-time
        likes:
          type: number
          description: The total number of likes the user created
        comments:
          type: number
          description: The total number of comments the user created
        memes:
          type: number
          description: The total number of comments the user created
        likesReceived:
          type: number
          description: The total number of likes the user received
        commentsReceived:
          type: number
          description: The total number of comments the user received
      x-model: User
      required:
        - username
        - displayName
        - password
    Template:
      type: object
      x-model: Template
      properties:
        name:
          type: string
          required: true
          unique: true
        creator:
          type: string
        visibility:
          type: string
          enum: [private, unlisted, public]
          default: 'public'
        image:
          type: string
          format: binary
          required: true
          description: The image buffer (can not be retrieved directly)
        publicId:
          type: string
          required: true
          unique: true
          description: The unique ID of the meme
        contentType:
          type: string
          default: 'image/png'
        createdAt:
          type: string
          format: date-time
        texts:
          type: array
        url:
          type: string
          description: The resource URL of the image
      required:
        - name
        - image
        - publicId
    Comment:
      type: object
      x-model: Comment
      properties:
        content:
          type: string
          required: true
        username:
          type: string
          required: true
        memePublicId:
          type: string
          required: true
        createdAt:
            type: string
            format: date-time
        publicId:
          type: string
          required: true
          unique: true
      required:
        - content
        - username
        - memePublicId
        - publicId
    Like:
      type: object
      x-model: Like
      properties:
        username:
          type: string
          required: true
        memePublicId:
          type: string
          required: true
      required:
        - username
        - memePublicId
  responses:
    BadRequest:
      description: Bad Request
    InternalServerError:
      description: Internal Server Error
    NotFound:
      description: Not Found